// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WDWS.Data;

#nullable disable

namespace WDWS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("wdws.Models.Lokacija", b =>
                {
                    b.Property<string>("postanskiBroj")
                        .HasColumnType("TEXT");

                    b.Property<string>("drzava")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nazivMjesta")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("postanskiBroj");

                    b.ToTable("Lokacije", (string)null);
                });

            modelBuilder.Entity("wdws.Models.Pasos", b =>
                {
                    b.Property<int>("pasosID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("KlijentID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("datumIsteka")
                        .HasColumnType("TEXT");

                    b.Property<string>("drzavaKojaIzdaje")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("klijentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("nacionalnost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("napomene")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("pasosID");

                    b.HasIndex("klijentId");

                    b.ToTable("Pasosi", (string)null);
                });

            modelBuilder.Entity("wdws.Models.Putovanje", b =>
                {
                    b.Property<int>("putovanjeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("cijenaPoOsobi")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("datumDolaska")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("datumPolaska")
                        .HasColumnType("TEXT");

                    b.Property<int>("duzinaPutovanja")
                        .HasColumnType("INTEGER");

                    b.Property<string>("mjestoDolaskapostanskiBroj")
                        .HasColumnType("TEXT");

                    b.Property<string>("mjestoPolaskapostanskiBroj")
                        .HasColumnType("TEXT");

                    b.Property<string>("prijevoznaSredstva")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("smjestajID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("vodicID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("vodicId")
                        .HasColumnType("TEXT");

                    b.HasKey("putovanjeID");

                    b.HasIndex("mjestoDolaskapostanskiBroj");

                    b.HasIndex("mjestoPolaskapostanskiBroj");

                    b.HasIndex("vodicId");

                    b.ToTable("Putovanja", (string)null);
                });

            modelBuilder.Entity("wdws.Models.Recenzija", b =>
                {
                    b.Property<int>("RecenzijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("KlijentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("klijentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("putovanjeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("tekstRecenzije")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RecenzijaID");

                    b.HasIndex("klijentId");

                    b.HasIndex("putovanjeID");

                    b.ToTable("Recenzije", (string)null);
                });

            modelBuilder.Entity("wdws.Models.Rezervacija", b =>
                {
                    b.Property<int>("rezervacijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MilesBodovi")
                        .HasColumnType("INTEGER");

                    b.Property<int>("brojPutnika")
                        .HasColumnType("INTEGER");

                    b.Property<int>("klijentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("klijentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("putovanjeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("smjestajID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("status")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ukupnaCijena")
                        .HasColumnType("REAL");

                    b.HasKey("rezervacijaID");

                    b.HasIndex("klijentId");

                    b.HasIndex("putovanjeID");

                    b.HasIndex("smjestajID");

                    b.ToTable("Rezervacije", (string)null);
                });

            modelBuilder.Entity("wdws.Models.Smjestaj", b =>
                {
                    b.Property<int>("SmjestajID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("CijenaSmjestaja")
                        .HasColumnType("REAL");

                    b.Property<string>("KontaktEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("KontaktTelefon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxKapacitet")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VrstaSmjestaja")
                        .HasColumnType("INTEGER");

                    b.Property<string>("lokacijapostanskiBroj")
                        .HasColumnType("TEXT");

                    b.Property<string>("naziv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SmjestajID");

                    b.HasIndex("lokacijapostanskiBroj");

                    b.ToTable("Smjestaji", (string)null);
                });

            modelBuilder.Entity("wdws.Models.Soba", b =>
                {
                    b.Property<int>("SobaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("cijena")
                        .HasColumnType("REAL");

                    b.Property<int>("kapacitetSobe")
                        .HasColumnType("INTEGER");

                    b.Property<int>("smjestajID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tipSobe")
                        .HasColumnType("INTEGER");

                    b.HasKey("SobaID");

                    b.HasIndex("smjestajID")
                        .IsUnique();

                    b.ToTable("Sobe", (string)null);
                });

            modelBuilder.Entity("wdws.Models.Korisnik", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("adresa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("datumRodjenja")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("pozicija")
                        .HasColumnType("INTEGER");

                    b.Property<string>("prezime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<char>("spol")
                        .HasColumnType("TEXT");

                    b.Property<string>("telefon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Korisnici", (string)null);
                });

            modelBuilder.Entity("wdws.Models.Klijent", b =>
                {
                    b.HasBaseType("wdws.Models.Korisnik");

                    b.Property<string>("kontaktZaHitneSlucajeve")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("nagradniBodovi")
                        .HasColumnType("INTEGER");

                    b.Property<string>("napomene")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Klijenti", (string)null);
                });

            modelBuilder.Entity("wdws.Models.TuristickiVodic", b =>
                {
                    b.HasBaseType("wdws.Models.Korisnik");

                    b.Property<bool>("dostupnost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("jezici")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Turisticki vodici", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wdws.Models.Pasos", b =>
                {
                    b.HasOne("wdws.Models.Klijent", "klijent")
                        .WithMany()
                        .HasForeignKey("klijentId");

                    b.Navigation("klijent");
                });

            modelBuilder.Entity("wdws.Models.Putovanje", b =>
                {
                    b.HasOne("wdws.Models.Lokacija", "mjestoDolaska")
                        .WithMany()
                        .HasForeignKey("mjestoDolaskapostanskiBroj");

                    b.HasOne("wdws.Models.Lokacija", "mjestoPolaska")
                        .WithMany()
                        .HasForeignKey("mjestoPolaskapostanskiBroj");

                    b.HasOne("wdws.Models.TuristickiVodic", "vodic")
                        .WithMany()
                        .HasForeignKey("vodicId");

                    b.Navigation("mjestoDolaska");

                    b.Navigation("mjestoPolaska");

                    b.Navigation("vodic");
                });

            modelBuilder.Entity("wdws.Models.Recenzija", b =>
                {
                    b.HasOne("wdws.Models.Klijent", "klijent")
                        .WithMany()
                        .HasForeignKey("klijentId");

                    b.HasOne("wdws.Models.Putovanje", "putovanje")
                        .WithMany()
                        .HasForeignKey("putovanjeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("klijent");

                    b.Navigation("putovanje");
                });

            modelBuilder.Entity("wdws.Models.Rezervacija", b =>
                {
                    b.HasOne("wdws.Models.Klijent", "klijent")
                        .WithMany()
                        .HasForeignKey("klijentId");

                    b.HasOne("wdws.Models.Putovanje", "put")
                        .WithMany()
                        .HasForeignKey("putovanjeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wdws.Models.Smjestaj", "smjestaj")
                        .WithMany()
                        .HasForeignKey("smjestajID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("klijent");

                    b.Navigation("put");

                    b.Navigation("smjestaj");
                });

            modelBuilder.Entity("wdws.Models.Smjestaj", b =>
                {
                    b.HasOne("wdws.Models.Lokacija", "lokacija")
                        .WithMany()
                        .HasForeignKey("lokacijapostanskiBroj");

                    b.Navigation("lokacija");
                });

            modelBuilder.Entity("wdws.Models.Soba", b =>
                {
                    b.HasOne("wdws.Models.Smjestaj", "smjestaj")
                        .WithOne("rezervisanaSoba")
                        .HasForeignKey("wdws.Models.Soba", "smjestajID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("smjestaj");
                });

            modelBuilder.Entity("wdws.Models.Korisnik", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("wdws.Models.Korisnik", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wdws.Models.Klijent", b =>
                {
                    b.HasOne("wdws.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("wdws.Models.Klijent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wdws.Models.TuristickiVodic", b =>
                {
                    b.HasOne("wdws.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("wdws.Models.TuristickiVodic", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wdws.Models.Smjestaj", b =>
                {
                    b.Navigation("rezervisanaSoba")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
